# Vis APGsembly code emulator, version 0.6 (beta)
# Version 0.314159+: Write 99 bottles of beer first line 
# Version 0.5: add support for "ZZ" and "*" preprocessor formats, mostly copied from APGompiler.py
# Version 0.6: Michael Simkin's visualizations for all calculator components. Writes 99 bottles of beer. 

import golly as g
import types
import time

let2cells =	{' ': ([], 5), '$': ([3, 0, 4, 2, 1, 4, 3, 1, 4, 4, 1, 4, 1, 2, 4, 3, 2, 4, 5, 2, 4, 1, 3, 4, 3, 3, 4, 2, 4, 4, 3, 4, 4, 4, 4, 4, 3, 5, 4, 5, 5, 4, 1, 6, 4, 3, 6, 4, 5, 6, 4, 2, 7, 4, 3, 7, 4, 4, 7, 4, 3, 8, 4], 7), '(': ([2, 2, 4, 1, 3, 4, 1, 4, 4, 1, 5, 4, 1, 6, 4, 1, 7, 4, 2, 8, 4], 4), ',': ([2, 8, 4, 2, 9, 4, 1, 10, 4], 4), '0': ([2, 2, 4, 3, 2, 4, 4, 2, 4, 1, 3, 4, 5, 3, 4, 1, 4, 4, 4, 4, 4, 5, 4, 4, 1, 5, 4, 3, 5, 4, 5, 5, 4, 1, 6, 4, 2, 6, 4, 5, 6, 4, 1, 7, 4, 5, 7, 4, 2, 8, 4, 3, 8, 4, 4, 8, 4], 7), '4': ([4, 2, 4, 3, 3, 4, 4, 3, 4, 2, 4, 4, 4, 4, 4, 1, 5, 4, 4, 5, 4, 1, 6, 4, 2, 6, 4, 3, 6, 4, 4, 6, 4, 5, 6, 4, 4, 7, 4, 4, 8, 4, 0], 7), '8': ([3, 2, 4, 4, 2, 4, 5, 2, 4, 2, 3, 4, 6, 3, 4, 2, 4, 4, 6, 4, 4, 3, 5, 4, 4, 5, 4, 5, 5, 4, 2, 6, 4, 6, 6, 4, 2, 7, 4, 6, 7, 4, 3, 8, 4, 4, 8, 4, 5, 8, 4], 7), '<': ([4, 3, 4, 3, 4, 4, 2, 5, 4, 3, 6, 4, 4, 7, 4], 5), '@': ([2, 1, 4, 3, 1, 4, 4, 1, 4, 1, 2, 4, 5, 2, 4, 1, 3, 4, 4, 3, 4, 5, 3, 4, 1, 4, 4, 3, 4, 4, 5, 4, 4, 1, 5, 4, 3, 5, 4, 5, 5, 4, 1, 6, 4, 4, 6, 4, 5, 6, 4, 1, 7, 4, 2, 8, 4, 3, 8, 4, 4, 8, 4, 5, 8, 4, 0], 7), 'D': ([2, 2, 4, 3, 2, 4, 4, 2, 4, 5, 2, 4, 2, 3, 4, 6, 3, 4, 2, 4, 4, 6, 4, 4, 2, 5, 4, 6, 5, 4, 2, 6, 4, 6, 6, 4, 2, 7, 4, 6, 7, 4, 2, 8, 4, 3, 8, 4, 4, 8, 4, 5, 8, 4, 0], 7), 'H': ([1, 2, 4, 5, 2, 4, 1, 3, 4, 5, 3, 4, 1, 4, 4, 5, 4, 4, 1, 5, 4, 2, 5, 4, 3, 5, 4, 4, 5, 4, 5, 5, 4, 1, 6, 4, 5, 6, 4, 1, 7, 4, 5, 7, 4, 1, 8, 4, 5, 8, 4], 7), 'L': ([2, 2, 4, 2, 3, 4, 2, 4, 4, 2, 5, 4, 2, 6, 4, 2, 7, 4, 2, 8, 4, 3, 8, 4, 4, 8, 4, 5, 8, 4, 6, 8, 4], 7), 'P': ([1, 2, 4, 2, 2, 4, 3, 2, 4, 4, 2, 4, 1, 3, 4, 5, 3, 4, 1, 4, 4, 5, 4, 4, 1, 5, 4, 2, 5, 4, 3, 5, 4, 4, 5, 4, 1, 6, 4, 1, 7, 4, 1, 8, 4], 7), 'T': ([2, 2, 4, 3, 2, 4, 4, 2, 4, 5, 2, 4, 6, 2, 4, 4, 3, 4, 4, 4, 4, 4, 5, 4, 4, 6, 4, 4, 7, 4, 4, 8, 4], 7), 'X': ([2, 2, 4, 6, 2, 4, 2, 3, 4, 6, 3, 4, 3, 4, 4, 5, 4, 4, 4, 5, 4, 3, 6, 4, 5, 6, 4, 2, 7, 4, 6, 7, 4, 2, 8, 4, 6, 8, 4], 7), '\\': ([1, 2, 4, 2, 3, 4, 2, 4, 4, 3, 5, 4, 4, 6, 4, 4, 7, 4, 5, 8, 4], 7), 'd': ([6, 1, 4, 6, 2, 4, 6, 3, 4, 3, 4, 4, 4, 4, 4, 5, 4, 4, 6, 4, 4, 2, 5, 4, 6, 5, 4, 2, 6, 4, 6, 6, 4, 2, 7, 4, 6, 7, 4, 3, 8, 4, 4, 8, 4, 5, 8, 4, 6, 8, 4], 7), 'h': ([1, 1, 4, 1, 2, 4, 1, 3, 4, 1, 4, 4, 2, 4, 4, 3, 4, 4, 4, 4, 4, 1, 5, 4, 5, 5, 4, 1, 6, 4, 5, 6, 4, 1, 7, 4, 5, 7, 4, 1, 8, 4, 5, 8, 4], 7), 'l': ([2, 1, 4, 3, 1, 4, 3, 2, 4, 3, 3, 4, 3, 4, 4, 3, 5, 4, 3, 6, 4, 3, 7, 4, 2, 8, 4, 3, 8, 4, 4, 8, 4], 5), 'p': ([2, 4, 4, 3, 4, 4, 4, 4, 4, 5, 4, 4, 2, 5, 4, 6, 5, 4, 2, 6, 4, 6, 6, 4, 2, 7, 4, 6, 7, 4, 2, 8, 4, 3, 8, 4, 4, 8, 4, 5, 8, 4, 2, 9, 4, 2, 10, 4, 2, 11, 4], 7), 't': ([2, 1, 4, 2, 2, 4, 1, 3, 4, 2, 3, 4, 3, 3, 4, 2, 4, 4, 2, 5, 4, 2, 6, 4, 2, 7, 4, 3, 8, 4, 4, 8, 4], 6), 'x': ([1, 4, 4, 5, 4, 4, 2, 5, 4, 4, 5, 4, 3, 6, 4, 2, 7, 4, 4, 7, 4, 1, 8, 4, 5, 8, 4], 7), '|': ([1, 2, 4, 1, 3, 4, 1, 4, 4, 1, 5, 4, 1, 6, 4, 1, 7, 4, 1, 8, 4], 3), '#': ([3, 1, 4, 6, 1, 4, 3, 2, 4, 6, 2, 4, 2, 3, 4, 3, 3, 4, 4, 3, 4, 5, 3, 4, 6, 3, 4, 7, 3, 4, 3, 4, 4, 6, 4, 4, 3, 5, 4, 6, 5, 4, 2, 6, 4, 3, 6, 4, 4, 6, 4, 5, 6, 4, 6, 6, 4, 7, 6, 4, 3, 7, 4, 6, 7, 4, 3, 8, 4, 6, 8, 4, 0], 8), "'": ([1, 1, 4, 1, 2, 4, 0], 3), '+': ([3, 3, 4, 3, 4, 4, 1, 5, 4, 2, 5, 4, 3, 5, 4, 4, 5, 4, 5, 5, 4, 3, 6, 4, 3, 7, 4], 7), '/': ([6, 2, 4, 5, 3, 4, 5, 4, 4, 4, 5, 4, 3, 6, 4, 3, 7, 4, 2, 8, 4], 7), '3': ([2, 2, 4, 3, 2, 4, 4, 2, 4, 1, 3, 4, 5, 3, 4, 5, 4, 4, 3, 5, 4, 4, 5, 4, 5, 6, 4, 1, 7, 4, 5, 7, 4, 2, 8, 4, 3, 8, 4, 4, 8, 4, 0], 7), '7': ([2, 2, 4, 3, 2, 4, 4, 2, 4, 5, 2, 4, 6, 2, 4, 6, 3, 4, 6, 4, 4, 5, 5, 4, 4, 6, 4, 4, 7, 4, 4, 8, 4], 7), ';': ([3, 3, 4, 3, 6, 4, 3, 7, 4, 2, 8, 4, 0], 4), '?': ([3, 2, 4, 4, 2, 4, 2, 3, 4, 5, 3, 4, 5, 4, 4, 4, 5, 4, 3, 6, 4, 3, 8, 4, 0], 6), 'C': ([3, 2, 4, 4, 2, 4, 5, 2, 4, 2, 3, 4, 6, 3, 4, 2, 4, 4, 2, 5, 4, 2, 6, 4, 2, 7, 4, 6, 7, 4, 3, 8, 4, 4, 8, 4, 5, 8, 4], 7), 'G': ([3, 2, 4, 4, 2, 4, 5, 2, 4, 2, 3, 4, 6, 3, 4, 2, 4, 4, 2, 5, 4, 4, 5, 4, 5, 5, 4, 6, 5, 4, 2, 6, 4, 6, 6, 4, 2, 7, 4, 6, 7, 4, 3, 8, 4, 4, 8, 4, 5, 8, 4], 7), 'K': ([2, 2, 4, 6, 2, 4, 2, 3, 4, 5, 3, 4, 2, 4, 4, 4, 4, 4, 2, 5, 4, 3, 5, 4, 2, 6, 4, 4, 6, 4, 2, 7, 4, 5, 7, 4, 2, 8, 4, 6, 8, 4, 0], 7), 'O': ([3, 2, 4, 4, 2, 4, 5, 2, 4, 2, 3, 4, 6, 3, 4, 2, 4, 4, 6, 4, 4, 2, 5, 4, 6, 5, 4, 2, 6, 4, 6, 6, 4, 2, 7, 4, 6, 7, 4, 3, 8, 4, 4, 8, 4, 5, 8, 4, 0], 7), 'S': ([2, 2, 4, 3, 2, 4, 4, 2, 4, 1, 3, 4, 5, 3, 4, 1, 4, 4, 2, 5, 4, 3, 5, 4, 4, 5, 4, 5, 6, 4, 1, 7, 4, 5, 7, 4, 2, 8, 4, 3, 8, 4, 4, 8, 4], 7), 'W': ([1, 2, 4, 5, 2, 4, 1, 3, 4, 5, 3, 4, 1, 4, 4, 5, 4, 4, 1, 5, 4, 5, 5, 4, 1, 6, 4, 3, 6, 4, 5, 6, 4, 1, 7, 4, 2, 7, 4, 4, 7, 4, 5, 7, 4, 1, 8, 4, 5, 8, 4], 7), '[': ([1, 2, 4, 2, 2, 4, 1, 3, 4, 1, 4, 4, 1, 5, 4, 1, 6, 4, 1, 7, 4, 1, 8, 4, 2, 8, 4], 4), '_': ([1, 8, 4, 2, 8, 4, 3, 8, 4, 4, 8, 4, 0], 6), 'c': ([3, 4, 4, 4, 4, 4, 5, 4, 4, 2, 5, 4, 6, 5, 4, 2, 6, 4, 2, 7, 4, 3, 8, 4, 4, 8, 4, 5, 8, 4, 6, 8, 4], 7), 'g': ([3, 4, 4, 4, 4, 4, 5, 4, 4, 6, 4, 4, 2, 5, 4, 6, 5, 4, 2, 6, 4, 6, 6, 4, 2, 7, 4, 6, 7, 4, 3, 8, 4, 4, 8, 4, 5, 8, 4, 6, 8, 4, 6, 9, 4, 6, 10, 4, 3, 11, 4, 4, 11, 4, 5, 11, 4], 7), 'k': ([1, 1, 4, 1, 2, 4, 1, 3, 4, 4, 3, 4, 1, 4, 4, 3, 4, 4, 1, 5, 4, 2, 5, 4, 1, 6, 4, 2, 6, 4, 3, 6, 4, 1, 7, 4, 4, 7, 4, 1, 8, 4, 5, 8, 4], 7), 'o': ([2, 4, 4, 3, 4, 4, 4, 4, 4, 1, 5, 4, 5, 5, 4, 1, 6, 4, 5, 6, 4, 1, 7, 4, 5, 7, 4, 2, 8, 4, 3, 8, 4, 4, 8, 4, 0], 7), 's': ([3, 4, 4, 4, 4, 4, 5, 4, 4, 6, 4, 4, 2, 5, 4, 3, 6, 4, 4, 6, 4, 5, 6, 4, 6, 7, 4, 2, 8, 4, 3, 8, 4, 4, 8, 4, 5, 8, 4], 7), 'w': ([2, 4, 4, 4, 4, 4, 6, 4, 4, 2, 5, 4, 4, 5, 4, 6, 5, 4, 2, 6, 4, 4, 6, 4, 6, 6, 4, 2, 7, 4, 4, 7, 4, 6, 7, 4, 3, 8, 4, 5, 8, 4, 0], 7), '{': ([3, 2, 4, 2, 3, 4, 2, 4, 4, 1, 5, 4, 2, 6, 4, 2, 7, 4, 3, 8, 4], 5), '"': ([1, 1, 4, 3, 1, 4, 1, 2, 4, 3, 2, 4, 0], 4), '&': ([4, 1, 4, 5, 1, 4, 3, 2, 4, 6, 2, 4, 3, 3, 4, 6, 3, 4, 3, 4, 4, 5, 4, 4, 2, 5, 4, 4, 5, 4, 7, 5, 4, 2, 6, 4, 5, 6, 4, 6, 6, 4, 2, 7, 4, 6, 7, 4, 3, 8, 4, 4, 8, 4, 5, 8, 4, 7, 8, 4, 0], 8), '*': ([3, 3, 4, 5, 3, 4, 4, 4, 4, 2, 5, 4, 3, 5, 4, 4, 5, 4, 5, 5, 4, 6, 5, 4, 4, 6, 4, 3, 7, 4, 5, 7, 4], 7), '.': ([2, 8, 4], 3), '2': ([3, 2, 4, 4, 2, 4, 2, 3, 4, 5, 3, 4, 5, 4, 4, 4, 5, 4, 3, 6, 4, 2, 7, 4, 2, 8, 4, 3, 8, 4, 4, 8, 4, 5, 8, 4, 0], 6), '6': ([2, 2, 4, 3, 2, 4, 4, 2, 4, 1, 3, 4, 1, 4, 4, 1, 5, 4, 2, 5, 4, 3, 5, 4, 4, 5, 4, 1, 6, 4, 5, 6, 4, 1, 7, 4, 5, 7, 4, 2, 8, 4, 3, 8, 4, 4, 8, 4, 0], 7), ':': ([2, 3, 4, 2, 6, 4, 0], 3), '>': ([1, 3, 4, 2, 4, 4, 3, 5, 4, 2, 6, 4, 1, 7, 4], 5), 'B': ([1, 2, 4, 2, 2, 4, 3, 2, 4, 4, 2, 4, 1, 3, 4, 5, 3, 4, 1, 4, 4, 5, 4, 4, 1, 5, 4, 2, 5, 4, 3, 5, 4, 4, 5, 4, 1, 6, 4, 5, 6, 4, 1, 7, 4, 5, 7, 4, 1, 8, 4, 2, 8, 4, 3, 8, 4, 4, 8, 4, 0], 7), 'F': ([2, 2, 4, 3, 2, 4, 4, 2, 4, 5, 2, 4, 6, 2, 4, 2, 3, 4, 2, 4, 4, 2, 5, 4, 3, 5, 4, 4, 5, 4, 5, 5, 4, 2, 6, 4, 2, 7, 4, 2, 8, 4, 0], 7), 'J': ([5, 2, 4, 6, 2, 4, 7, 2, 4, 6, 3, 4, 6, 4, 4, 6, 5, 4, 2, 6, 4, 6, 6, 4, 2, 7, 4, 6, 7, 4, 3, 8, 4, 4, 8, 4, 5, 8, 4], 8), 'N': ([1, 2, 4, 5, 2, 4, 1, 3, 4, 2, 3, 4, 5, 3, 4, 1, 4, 4, 3, 4, 4, 5, 4, 4, 1, 5, 4, 4, 5, 4, 5, 5, 4, 1, 6, 4, 5, 6, 4, 1, 7, 4, 5, 7, 4, 1, 8, 4, 5, 8, 4], 7), 'R': ([2, 2, 4, 3, 2, 4, 4, 2, 4, 5, 2, 4, 2, 3, 4, 6, 3, 4, 2, 4, 4, 6, 4, 4, 2, 5, 4, 3, 5, 4, 4, 5, 4, 5, 5, 4, 2, 6, 4, 6, 6, 4, 2, 7, 4, 6, 7, 4, 2, 8, 4, 6, 8, 4, 0], 7), 'V': ([1, 2, 4, 5, 2, 4, 1, 3, 4, 5, 3, 4, 1, 4, 4, 5, 4, 4, 2, 5, 4, 4, 5, 4, 2, 6, 4, 4, 6, 4, 3, 7, 4, 3, 8, 4, 0], 7), 'Z': ([1, 2, 4, 2, 2, 4, 3, 2, 4, 4, 2, 4, 5, 2, 4, 5, 3, 4, 4, 4, 4, 3, 5, 4, 2, 6, 4, 1, 7, 4, 1, 8, 4, 2, 8, 4, 3, 8, 4, 4, 8, 4, 5, 8, 4], 7), 'b': ([1, 1, 4, 1, 2, 4, 1, 3, 4, 1, 4, 4, 2, 4, 4, 3, 4, 4, 4, 4, 4, 1, 5, 4, 5, 5, 4, 1, 6, 4, 5, 6, 4, 1, 7, 4, 5, 7, 4, 1, 8, 4, 2, 8, 4, 3, 8, 4, 4, 8, 4], 7), 'f': ([4, 1, 4, 5, 1, 4, 3, 2, 4, 3, 3, 4, 2, 4, 4, 3, 4, 4, 4, 4, 4, 3, 5, 4, 3, 6, 4, 3, 7, 4, 3, 8, 4], 6), 'j': ([4, 2, 4, 4, 4, 4, 4, 5, 4, 4, 6, 4, 4, 7, 4, 4, 8, 4, 4, 9, 4, 2, 10, 4, 3, 10, 4], 5), 'n': ([1, 4, 4, 3, 4, 4, 4, 4, 4, 1, 5, 4, 2, 5, 4, 5, 5, 4, 1, 6, 4, 5, 6, 4, 1, 7, 4, 5, 7, 4, 1, 8, 4, 5, 8, 4, 0], 7), 'r': ([1, 4, 4, 3, 4, 4, 4, 4, 4, 1, 5, 4, 2, 5, 4, 5, 5, 4, 1, 6, 4, 1, 7, 4, 1, 8, 4], 7), 'v': ([2, 4, 4, 6, 4, 4, 2, 5, 4, 6, 5, 4, 3, 6, 4, 5, 6, 4, 3, 7, 4, 5, 7, 4, 4, 8, 4], 7), 'z': ([2, 4, 4, 3, 4, 4, 4, 4, 4, 5, 4, 4, 6, 4, 4, 5, 5, 4, 4, 6, 4, 3, 7, 4, 2, 8, 4, 3, 8, 4, 4, 8, 4, 5, 8, 4, 6, 8, 4], 7), '!': ([2, 2, 4, 2, 3, 4, 2, 4, 4, 2, 5, 4, 2, 6, 4, 2, 8, 4, 0], 3), '%': ([3, 2, 4, 8, 2, 4, 2, 3, 4, 4, 3, 4, 7, 3, 4, 3, 4, 4, 6, 4, 4, 5, 5, 4, 4, 6, 4, 8, 6, 4, 3, 7, 4, 7, 7, 4, 9, 7, 4, 2, 8, 4, 8, 8, 4], 10), ')': ([2, 2, 4, 3, 3, 4, 3, 4, 4, 3, 5, 4, 3, 6, 4, 3, 7, 4, 2, 8, 4], 4), '-': ([2, 5, 4, 3, 5, 4, 4, 5, 4, 5, 5, 4, 0], 6), '1': ([3, 2, 4, 2, 3, 4, 3, 3, 4, 3, 4, 4, 3, 5, 4, 3, 6, 4, 3, 7, 4, 2, 8, 4, 3, 8, 4, 4, 8, 4, 0], 5), '5': ([2, 2, 4, 3, 2, 4, 4, 2, 4, 5, 2, 4, 6, 2, 4, 2, 3, 4, 2, 4, 4, 2, 5, 4, 3, 5, 4, 4, 5, 4, 5, 5, 4, 6, 6, 4, 2, 7, 4, 6, 7, 4, 3, 8, 4, 4, 8, 4, 5, 8, 4], 7), '9': ([2, 2, 4, 3, 2, 4, 4, 2, 4, 1, 3, 4, 5, 3, 4, 1, 4, 4, 5, 4, 4, 2, 5, 4, 3, 5, 4, 4, 5, 4, 5, 5, 4, 5, 6, 4, 1, 7, 4, 5, 7, 4, 2, 8, 4, 3, 8, 4, 4, 8, 4], 7), '=': ([2, 3, 4, 3, 3, 4, 4, 3, 4, 5, 3, 4, 6, 3, 4, 2, 6, 4, 3, 6, 4, 4, 6, 4, 5, 6, 4, 6, 6, 4, 0], 7), 'A': ([1, 2, 4, 2, 2, 4, 3, 2, 4, 0, 3, 4, 4, 3, 4, 0, 4, 4, 4, 4, 4, 0, 5, 4, 1, 5, 4, 2, 5, 4, 3, 5, 4, 4, 5, 4, 0, 6, 4, 4, 6, 4, 0, 7, 4, 4, 7, 4, 0, 8, 4, 4, 8, 4, 0], 7), 'E': ([1, 2, 4, 2, 2, 4, 3, 2, 4, 4, 2, 4, 5, 2, 4, 1, 3, 4, 1, 4, 4, 1, 5, 4, 2, 5, 4, 3, 5, 4, 4, 5, 4, 1, 6, 4, 1, 7, 4, 1, 8, 4, 2, 8, 4, 3, 8, 4, 4, 8, 4, 5, 8, 4, 0], 7), 'I': ([2, 2, 4, 3, 2, 4, 4, 2, 4, 3, 3, 4, 3, 4, 4, 3, 5, 4, 3, 6, 4, 3, 7, 4, 2, 8, 4, 3, 8, 4, 4, 8, 4], 5), 'M': ([1, 2, 4, 5, 2, 4, 1, 3, 4, 2, 3, 4, 4, 3, 4, 5, 3, 4, 1, 4, 4, 3, 4, 4, 5, 4, 4, 1, 5, 4, 5, 5, 4, 1, 6, 4, 5, 6, 4, 1, 7, 4, 5, 7, 4, 1, 8, 4, 5, 8, 4], 7), 'Q': ([3, 2, 4, 4, 2, 4, 5, 2, 4, 2, 3, 4, 6, 3, 4, 2, 4, 4, 6, 4, 4, 2, 5, 4, 6, 5, 4, 2, 6, 4, 6, 6, 4, 2, 7, 4, 6, 7, 4, 3, 8, 4, 4, 8, 4, 5, 8, 4, 5, 9, 4, 6, 9, 4, 0], 7), 'U': ([2, 2, 4, 6, 2, 4, 2, 3, 4, 6, 3, 4, 2, 4, 4, 6, 4, 4, 2, 5, 4, 6, 5, 4, 2, 6, 4, 6, 6, 4, 2, 7, 4, 6, 7, 4, 3, 8, 4, 4, 8, 4, 5, 8, 4], 7), 'Y': ([1, 2, 4, 5, 2, 4, 1, 3, 4, 5, 3, 4, 1, 4, 4, 5, 4, 4, 2, 5, 4, 4, 5, 4, 3, 6, 4, 3, 7, 4, 3, 8, 4], 7), ']': ([2, 2, 4, 3, 2, 4, 3, 3, 4, 3, 4, 4, 3, 5, 4, 3, 6, 4, 3, 7, 4, 2, 8, 4, 3, 8, 4], 4), 'a': ([3, 4, 4, 4, 4, 4, 5, 4, 4, 6, 5, 4, 3, 6, 4, 4, 6, 4, 5, 6, 4, 6, 6, 4, 2, 7, 4, 6, 7, 4, 3, 8, 4, 4, 8, 4, 5, 8, 4, 6, 8, 4, 0], 7), 'e': ([2, 4, 4, 3, 4, 4, 4, 4, 4, 1, 5, 4, 5, 5, 4, 1, 6, 4, 2, 6, 4, 3, 6, 4, 4, 6, 4, 5, 6, 4, 1, 7, 4, 2, 8, 4, 3, 8, 4, 4, 8, 4, 5, 8, 4], 7), 'i': ([1, 2, 4, 1, 4, 4, 1, 5, 4, 1, 6, 4, 1, 7, 4, 1, 8, 4, 0], 3), 'm': ([1, 4, 4, 2, 4, 4, 3, 4, 4, 4, 4, 4, 1, 5, 4, 3, 5, 4, 5, 5, 4, 1, 6, 4, 3, 6, 4, 5, 6, 4, 1, 7, 4, 3, 7, 4, 5, 7, 4, 1, 8, 4, 3, 8, 4, 5, 8, 4, 0], 7), 'q': ([2, 4, 4, 3, 4, 4, 4, 4, 4, 5, 4, 4, 1, 5, 4, 5, 5, 4, 1, 6, 4, 5, 6, 4, 1, 7, 4, 5, 7, 4, 2, 8, 4, 3, 8, 4, 4, 8, 4, 5, 8, 4, 5, 9, 4, 5, 10, 4, 5, 11, 4], 7), 'u': ([1, 4, 4, 5, 4, 4, 1, 5, 4, 5, 5, 4, 1, 6, 4, 5, 6, 4, 1, 7, 4, 4, 7, 4, 5, 7, 4, 2, 8, 4, 3, 8, 4, 5, 8, 4, 0], 7), 'y': ([2, 4, 4, 6, 4, 4, 2, 5, 4, 6, 5, 4, 2, 6, 4, 6, 6, 4, 2, 7, 4, 6, 7, 4, 3, 8, 4, 4, 8, 4, 5, 8, 4, 6, 8, 4, 6, 9, 4, 6, 10, 4, 3, 11, 4, 4, 11, 4, 5, 11, 4], 7), '}': ([1, 2, 4, 2, 3, 4, 2, 4, 4, 3, 5, 4, 2, 6, 4, 2, 7, 4, 1, 8, 4], 5)}

APGsembly = """

INITIAL; *; ROOT; INC SQX, INC SQY, NOP

# ----- ROOT routing ---- 
# 0 - start first digit 
# 1 - D1 next 
# 2 - D1 print 
# 3 - D2 next  
# 4 - D2 print 
# 5 - T7 next 
# 6 - T7 print

ROOT; *; ROOT1; TDEC R0
ROOT1; Z; PRND1; NOP
ROOT1; NZ; ROOT2; TDEC R0
ROOT2; Z; PRND1_2; NOP
ROOT2; NZ; ROOT3; TDEC R0
ROOT3; Z; PRND1_5; NOP
ROOT3; NZ; ROOT4; TDEC R0
ROOT4; Z; PRND2_7; NOP
ROOT4; NZ; ROOT5; TDEC R0
ROOT5; Z; PRND2_12; NOP
ROOT5; NZ; ROOT6; TDEC R0
ROOT6; Z; T7READ; NOP
ROOT6; NZ; ROOT7; TDEC R0
ROOT7; Z; T7READ0_8; NOP
ROOT7; NZ; E0; TDEC R0


# --- Print R3 = first digit---- 

PRND1; ZZ; PRND1_0; TDEC R3, INC R5
PRND1_0; Z; PRND2; TDEC R5
PRND1_0; NZ; PRND1_1; INC R0, NOP
PRND1_1; *; L0; NOP
PRND1_2; ZZ; PRND1_3; TDEC R3, INC R5
PRND1_3; Z; PRND1_4; INC R0, NOP
PRND1_3; NZ; L0; INC R0, NOP
PRND1_4; ZZ; A0; INC R0, NOP
PRND1_5; ZZ; PRND1_6; TDEC R5
PRND1_6; *; PRND1_7; TDEC R5
PRND1_7; *; PRND1_8; TDEC R5
PRND1_8; Z; PRND2; INC R3, TDEC R5
PRND1_8; NZ; PRND1_8; INC R3, TDEC R5

# --- Print R4 = second digit---- 

PRND2; *; PRND2_0; TDEC R4, INC R5
PRND2_0; Z; PRND2_8; NOP
PRND2_0; NZ; PRND2_3; NOP
PRND2_3; ZZ; PRND2_4; INC R0, NOP
PRND2_4; ZZ; PRND2_5; INC R0, NOP
PRND2_5; ZZ; PRND2_6; INC R0, NOP
PRND2_6; *; L0; NOP
PRND2_7; ZZ; PRND2_8; TDEC R4, INC R5
PRND2_8; Z; PRND2_9; INC R0, NOP
PRND2_8; NZ; PRND2_3; NOP
PRND2_9; ZZ; PRND2_10; INC R0, NOP
PRND2_10; ZZ; PRND2_11; INC R0, NOP
PRND2_11; ZZ; A0; INC R0, NOP
PRND2_12; ZZ; PRND2_1; TDEC R5
PRND2_1; *; PRND2_13; TDEC R5
PRND2_13; Z; DEC12; NOP
PRND2_13; NZ; PRND2_13; INC R4, TDEC R5

# --- TDEC R3, R4 decreasing last digit ---- 

DEC12; ZZ; DEC12_0; TDEC R6
DEC12_0; Z; DEC12_1; INC R6, TDEC R4
DEC12_0; NZ; INCSQY0; INC SQY, NOP
INCSQY0; ZZ; INCSQY1; INC SQY, NOP
INCSQY1; ZZ; INCSQY2; INC SQY, NOP
INCSQY2; ZZ; INCSQY3; INC SQY, NOP
INCSQY3; ZZ; INCSQY4; INC SQY, NOP
INCSQY4; ZZ; INCSQY5; INC SQY, NOP
INCSQY5; ZZ; ROOT_1; INC SQY, NOP
DEC12_1; Z; DEC12_2; TDEC R3, INC R6
DEC12_1; NZ; DEC12_i; TDEC R3, INC R6
DEC12_i; Z; DEC12_i1; TDEC R4
DEC12_i; NZ; INCSQY0; INC R3, NOP
DEC12_i1; Z; ROOT_1; INC R0, NOP
DEC12_i1; NZ; INCSQY0; INC R4, NOP
DEC12_2; *; DEC12_3; INC R4, NOP
DEC12_3; ZZ; DEC12_4; INC R4, NOP
DEC12_4; ZZ; DEC12_5; INC R4, NOP
DEC12_5; ZZ; DEC12_6; INC R4, NOP
DEC12_6; ZZ; DEC12_7; INC R4, NOP
DEC12_7; ZZ; DEC12_8; INC R4, NOP
DEC12_8; ZZ; DEC12_9; INC R4, NOP
DEC12_9; ZZ; DEC12_10; INC R4, NOP
DEC12_10; ZZ; INCSQY0; INC R4, NOP

# ----- Next letter ---- 

L0; *; L1; READ T6
L1; Z; L2; RESET T6, INC T6
L1; NZ; L5; SET T6, INC T6
L2; *; L3; READ T6
L3; Z; ROOT; RESET T6, INC T6
L3; NZ; L6; SET T6, INC T6
L5; *; L6; INC T6
L6; *; L0; INC T6

# --- Printing letter from T6 --- 
A0; *; A1; READ T6
A1; Z; X0; RESET T6, INC T6
A1; NZ; X1; SET T6, INC T6
X0; *; Y0; READ T6
Y0; Z; X00; RESET T6, INC T6
Y0; NZ; X01; SET T6, INC T6
X01; *; Y01; READ T6
Y01; Z; A0; INC SQX, RESET T6, INC T6
Y01; NZ; Z01; DEC SQX, SET T6
Z01; *; A0; INC T6
X1; *; Y1; READ T6
Y1; Z; X10; RESET T6, INC T6
Y1; NZ; X11; SET T6, INC T6
X10; *; Y10; READ T6
Y10; Z; A0; INC SQY, RESET T6, INC T6
Y10; NZ; Z10; DEC SQY, SET T6
Z10; *; A0; INC T6
X11; *; Y11; READ T6
Y11; Z; X110; READ SQ, RESET T6
Y11; NZ; A0; SET T6, SET SQ, INC T6
X110; *; A0; INC T6
X00; *; RX; DEC T6
RX; Z; ROOT; NOP
RX; NZ; RX; DEC T6


# ---- T7 Letter Setup ---- 

T7READ; *; T7READ1; READ T7

T7READ1; Z; T7READ0_3; RESET T7, INC T7, INC R0
T7READ1; NZ; T7READ1_3; SET T7, INC T7, INC R0

T7READ0_3; *; T7READ0_4; INC R0, NOP
T7READ0_4; ZZ; T7READ0_5; INC R0, NOP
T7READ0_5; ZZ; T7READ0_6; INC R0, NOP
T7READ0_6; ZZ; T7READ0_7; INC R0, NOP
T7READ0_7; *; A0; INC R0, NOP
T7READ0_8; ZZ; T7READ0_9; READ T7
T7READ0_9; Z; ROOT_1; RESET T7, INC T7
T7READ0_9; NZ; T7READ; SET T7, INC T7

T7READ1_3; *; T7READ1_4; INC R0, NOP
T7READ1_4; ZZ; T7READ1_5; INC R0, NOP
T7READ1_5; ZZ; T7READ1_6; INC R0, NOP
T7READ1_6; *; L0; INC R0, NOP

# ---- ROOT_1 the whole song logic  ---- 

ROOT_1; *; ROOT_10; TDEC R1
ROOT_10; Z; T7READ; INC R1, NOP
ROOT_10; NZ; ROOT_11; TDEC R1
ROOT_11; Z; MAIN; NOP
ROOT_11; NZ; ROOT_12; TDEC R1
ROOT_12; Z; MAIN13; NOP
ROOT_12; NZ; ROOT_13; TDEC R1
ROOT_13; Z; MAIN16; NOP
ROOT_13; NZ; ROOT_14; TDEC R1
ROOT_14; Z; MAIN22; NOP
ROOT_14; NZ; ROOT_15; TDEC R1
ROOT_15; Z; FINISH_ROOT; NOP
ROOT_15; NZ; E0; TDEC R1

# ---- FINISH_ROOT ----- 

FINISH_ROOT; *; FINISH_ROOT1; TDEC R3
FINISH_ROOT1; Z; S1Finish; NOP
FINISH_ROOT1; NZ; FINISH_ROOT2; TDEC R3
FINISH_ROOT2; Z; S2Finish; NOP
FINISH_ROOT2; NZ; FINISH_ROOT3; TDEC R3
FINISH_ROOT3; Z; S4Finish; NOP
FINISH_ROOT3; NZ; FINISH_ROOT4; TDEC R3
FINISH_ROOT4; Z; S7Finish; NOP
FINISH_ROOT4; NZ; FINISH_ROOT5; TDEC R3
FINISH_ROOT5; Z; S11Finish; NOP
FINISH_ROOT5; NZ; E0; TDEC R3


# ---- FINISH Funcs ----- 

# Write next T7 sentence
FINISHWrite; *; FINISH2; INC R1, NOP
FINISH2; ZZ; FINISH3; INC R1, NOP
FINISH3; ZZ; FINISH4; INC R1, NOP
FINISH4; ZZ; FINISH4i; INC R1, NOP
FINISH4i; ZZ; T7READ; INC R1, NOP

FINISHNewLines; ZZ; FINISH6; DEC SQY
FINISH6; Z; FINISH7; TDEC R8, INC SQY
FINISH6; NZ; FINISH6; DEC SQY

FINISH7; Z; FINISH8; TDEC R0
FINISH7; NZ; FINISH7; TDEC R8, INC R0, INC SQX

FINISH8; Z; FINISH_ROOT; TDEC R8
FINISH8; NZ; FINISH8; TDEC R0, INC R8, INC SQX

FINISHNewLine; ZZ; FINISH61; DEC SQY, INC SQX
FINISH61; Z; FINISH71; TDEC R8, INC SQY
FINISH61; NZ; FINISH61; DEC SQY

FINISH71; Z; FINISH81; TDEC R0, INC SQX, INC R0
FINISH71; NZ; FINISH71; TDEC R8, INC R0, INC SQX

FINISH81; Z; FINISH_ROOT; NOP
FINISH81; NZ; FINISH81; TDEC R0, INC R8

# --- MAIN logic ---

MAIN; ZZ; MAIN0; TDEC R2
MAIN0; Z; MAIN1; INC R2, NOP
MAIN0; NZ; ROOT; NOP
MAIN1; ZZ; MAIN2; DEC SQY
MAIN2; Z; MAIN3; INC SQY, NOP
MAIN2; NZ; MAIN2; DEC SQY
MAIN3; ZZ; MAIN4; NOP, INC R1
MAIN4; ZZ; MAIN5; NOP, INC R1
MAIN5; ZZ; MAIN6; TDEC R8, INC R0, INC SQX

MAIN6; Z; MAIN7; TDEC R0
MAIN6; NZ; MAIN6; TDEC R8, INC R0, INC SQX

MAIN7; Z; MAIN12; TDEC R8
MAIN7; NZ; MAIN7; TDEC R0, INC R8

MAIN12; *; T7READ; NOP
MAIN13; ZZ; MAIN14; INC R1, NOP
MAIN14; ZZ; MAIN15; INC R1, NOP
MAIN15; ZZ; ROOT; INC R1, NOP
MAIN16; ZZ; MAIN17; TDEC R3
MAIN17; Z; ISEND; TDEC R4
MAIN17; NZ; MAIN18; INC R1, INC R3, NOP

ISEND; *; ISE0; TDEC R4
ISE0; Z; FINISH; NOP
ISE0; NZ; ISEND1; INC R4, NOP
ISEND1; ZZ; MAIN18; INC R4, INC R1, NOP

MAIN18; ZZ; MAIN19; INC R1, NOP
MAIN19; ZZ; MAIN21; INC R1, NOP
MAIN21; ZZ; T7READ; INC R1, NOP
MAIN22; ZZ; MAIN23; DEC SQY
MAIN23; Z; MAIN24; DEC T7
MAIN23; NZ; MAIN23; DEC SQY
MAIN24; Z; MAIN25; TDEC R8, INC R0, INC SQX
MAIN24; NZ; MAIN24; DEC T7

MAIN25; Z; MAIN26; TDEC R0
MAIN25; NZ; MAIN25; TDEC R8, INC R0, INC SQX

MAIN26; Z; MAIN29; TDEC R8
MAIN26; NZ; MAIN26; TDEC R0, INC R8, INC SQX

MAIN29; *; ROOT; INC SQY, NOP

FINISH; *; T7SKIP; READ T7
T7SKIP; Z; T7SKIP1; RESET T7, INC T7
T7SKIP; NZ; FINISH; SET T7, INC T7
T7SKIP1; *; T7SKIP2; READ T7
T7SKIP2; Z; FINISH1; RESET T7, INC T7
T7SKIP2; NZ; FINISH; SET T7, INC T7

FINISH1; *; FINISHWrite; INC R5, NOP
S1Finish; ZZ; S1Finishx; INC R5, NOP

S1Finishx; *; S1Finishy; TDEC R5
S1Finishy; Z; E0; NOP
S1Finishy; NZ; S1Finishz; NOP

E0; *; E01; NOP
E01; ZZ; E0; NOP

S1Finishz; ZZ; FINISHNewLines; INC R3, NOP
S2Finish; ZZ; S3Finish; INC R3, NOP
S3Finish; ZZ; FINISHWrite; INC R3, NOP
S4Finish; ZZ; S5Finish; INC R3, NOP
S5Finish; ZZ; S6Finish; INC R3, NOP
S6Finish; ZZ; FINISHNewLine; INC R3, NOP
S7Finish; ZZ; S8Finish; INC R3, NOP
S8Finish; ZZ; S9Finish; INC R3, NOP
S9Finish; ZZ; S10Finish; INC R3, NOP
S10Finish; ZZ; FINISHWrite; INC R3, NOP
S11Finish; ZZ; S1Finishx; NOP

"""

program = {}


registers = {'R3':0, 'R2':1, 'R4':2, 'R5':0, 'R6':1, 'R8':10, 'T6': [0, '010010010010010010010100111011111011111011111011111011100111010010010010111010010111100111011011011111011011011111100111010010111010010010010111100011111011111011111011111011111100100011011011100000100100100100100100100101001110110110110110111110111001110101110101110101110101110101110101111001110110110111001000110110110110111000001001001001001001001001010011101111101101101101111101110011101001001001011101001011110011101101101111101101101111110001011101011101001001001011110001101101101101101101101110000010010010010010010010100111011011011011111011100111010010010010010010111100111011011011111011011011111100111010010010111010010010111100011111011111011011111011111100100011011011100000100100100100100101001110111110111001110100101111001110110110111110111001110101110101110101110101110101110101111000110111110111001000110110110110111000001001001001001001001010011101101111101111101111101111110011101001001011101001001011110011101101101111101101101111110011101001001011101001001011110001111101111101101101101111110010001101110000010010010010010010010100111011111011111011111011111011100111010010010111010010010111100111011011011111011011011111100111010010010111010010010111100011111011111011100100011011011011011100000100101001111001110100100100100100101001110111110111110110110110111111001110100100101111000111110111110111111001000110111000001001001001001001001010011101111101101111101111101110011101001001011101001001011110011101101101111101101101111110011101001001011101001001011110001111101111101101111101111110010001101101110000010010010010010010010100111011011011111011111011100111010010010111010010010111100111011011011111011011011111100111010010010111010010010111100011111011111011111011111011111100100011011011100001001001001001001000001001010011110011101001001001001001010011101111101111101111101111101111101111110011110011110010001101110000010010010010010010010010100111011111011111011111011111011111011111100010111010100111100010111010010010100111011111011111011111011111011111011111100100011011100000100100100100100100101001110111110111110111110111110111001110100100100100100101111001110110110111110110110111111001110100100101110100100101111000111110111110111110110111111001000110110111000001001001001001001001010011101101101110011101001011101001011110011101101111101101111110011101001011101001011110011101111101111101111110010001101101101101110000010010010010010010010010100111011111011111011111011111011111011111011111100010010010111010010010010111100111011011011011111100111010010010010111100011111011111011111100100011011011011011100000100100100100100100101001110111110111110111001110100100100101111001110110110110111111001110100100100101111001110110110111111001000110110110110111000001001001001001001001010011101111101111101110011101001001001011110011101101101101111110011101001001001011110011101111101111101111101111101111101111101111110010001110000010010010010010010010100111011111011111011100111010010111010010111100111011011111011011111100111010010111010010111100111011011111011111100100011011011011011100000100100100101001110110111001110101110101110101110101110101110101111000110110110111110110110111111001111000111000001001001001001001001010011101111101111101110011101001001001011101001001011110011101101101111101101101101111110011101001001001011101001001011110001111101111101111101111101111101111101111110010001101101101110000010010010010010010010010100111011111011111011111011111011111011111011111100010010010111100111100111010010010010100111011111011111011111100100011011011011011100000100100100100100100100101001110111110111110111110111110110111111001000110111000001001001001001001001001001001010011110011110001111101111101111101111101111101111101101111110010001101110000010010010010010010010010100111011111011111011111011111011111011111011111100010010010010111010111100111011011111011100111010010010010111010100111011011011100100011011011011011100000100100100100100100100101001110110110110110110110111111001110101110101110101110101110101110101110101111001110110110111001000110110110110111000001001001001001001001001010011101111101111101111101111110011101001001001010011101111101111101111101111110011101001001001010011101111101111101111110010001101101101101110000010010010010010010010010100111011111011111011111011111100010111100011111100111010010010010100111011111011111011111100100011011011011011100000100100100100100100101001110111110111110111001110100100100101111001110110110110111111001110100100100101111000111110111110111111001000110110110110111000001001001001001001001001001001001010011101111101111101111101111101111101111101111110011101001001001011110011101101101101111110011101001001001011110001111101111101111110010001101101101101110000010010010010010010010100111011111011111011100111010010010010111100111011011011011111100111010010010010111010010010100111011111011111011111011111011111011111011111100100011011011011100000100100100100100100100101001110111110111110111110111111000101111000111111001110101001111001000110110110110111000001001001001001001001001010011101101101111101110011101001011101001011110011101101111101101111110011101001011101001011110001111101101101111110010001101101101110000010010010100111011011100111010111010111010111010111010111010111010100111011011011011011111100010010010010010111100011011011011011011011011100000100100100100100100101001110111110111110111111000100100100101111001110111001110101001110111110111110111110111111001000110110110111000001001001001001010011101111110001001011101011101010011101101110011101011110001101111101111110010001101101101110000010010010010010010010100111011111011111011111100010010010010111100011111011111011111011111100010010010010111100011111011111011111011111100100011011011011100000100100100100100100100101001110110110110111111000101110100101111000111110111001110100101110101001110110110110111111001000110110110111000001001001001001001001010011101111101111101111110001001001001011101001001011110011101101101111110011101001001011110001111101111101111101111101111101111101111110010001101101101110000010010010010010010010010100111011011011011111100111010010010111010111100111011011111011011111100111010111010010010111100111011011011011111100100011011011011100000100100100100100100100101001110110110111001000110110110110111000001001001001001001001001001001010011101101110011101011110001101101101101101101101101110000'], 'T7': [0, '']}

reg2x = {}
lastx = -120
memory = {}
progname = "Write Song"

def Write(L, dx = 0, dy = 0):
	global let2cells
	d = 0
	for i in range(len(L)):
		let, dl = let2cells[L[i]]
		g.putcells(let, dx + d, dy)
		d += dl
		
mullookup = {"MUL0 00000":["Z", "00000"],"MUL1 00000":["Z", "00101"],"MUL0 00001":["NZ", "00000"],"MUL1 00001":["NZ", "00101"],
                         "MUL0 00010":["Z", "00001"],"MUL1 00010":["Z", "00110"],"MUL0 00011":["NZ", "00001"],"MUL1 00011":["NZ", "00110"],
                         "MUL0 00100":["Z", "00010"],"MUL1 00100":["Z", "00111"],"MUL0 00101":["NZ", "00010"],"MUL1 00101":["NZ", "00111"],
                         "MUL0 00110":["Z", "00011"],"MUL1 00110":["Z", "01000"],"MUL0 00111":["NZ", "00011"],"MUL1 00111":["NZ", "01000"],
                         "MUL0 01000":["Z", "00100"],"MUL1 01000":["Z", "01001"],"MUL0 01001":["NZ", "00100"],"MUL1 01001":["NZ", "01001"],
                         "MUL0 01010":["Z", "00101"],"MUL1 01010":["Z", "01010"],"MUL0 01011":["NZ", "00101"],"MUL1 01011":["NZ", "01010"],
                         "MUL0 01100":["Z", "00110"],"MUL1 01100":["Z", "01011"],"MUL0 01101":["NZ", "00110"],"MUL1 01101":["NZ", "01011"],
                         "MUL0 01110":["Z", "00111"],"MUL1 01110":["Z", "01100"],"MUL0 01111":["NZ", "00111"],"MUL1 01111":["NZ", "01100"],
                         "MUL0 10000":["Z", "01000"],"MUL1 10000":["Z", "01101"],"MUL0 10001":["NZ", "01000"],"MUL1 10001":["NZ", "01101"],
                         "MUL0 10010":["Z", "01001"],"MUL1 10010":["Z", "01110"],"MUL0 10011":["NZ", "01001"],"MUL1 10011":["NZ", "01110"],
                         "MUL0 10100":["Z", "01010"],"MUL1 10100":["Z", "01111"],"MUL0 10101":["NZ", "01010"],"MUL1 10101":["NZ", "01111"],
                         "MUL0 10110":["Z", "01011"],"MUL1 10110":["Z", "00000"],"MUL0 10111":["NZ", "01011"],"MUL1 10111":["NZ", "00000"],
                         "MUL0 11000":["Z", "01100"],"MUL1 11000":["Z", "00001"],"MUL0 11001":["NZ", "01100"],"MUL1 11001":["NZ", "00001"],
                         "MUL0 11010":["Z", "01101"],"MUL1 11010":["Z", "00010"],"MUL0 11011":["NZ", "01101"],"MUL1 11011":["NZ", "00010"],
                         "MUL0 11100":["Z", "01110"],"MUL1 11100":["Z", "00011"],"MUL0 11101":["NZ", "01110"],"MUL1 11101":["NZ", "00011"],
                         "MUL0 11110":["Z", "01111"],"MUL1 11110":["Z", "00100"],"MUL0 11111":["NZ", "01111"],"MUL1 11111":["NZ", "00100"]}

addlookup = {"000 bit0 A1":["NONE","010 bit1"],"000 bit0 B1":["NZ","000 bit0"],"000 bit0 B0":["Z","000 bit0"],
                         "000 bit1 A1":["NONE","010 bit0"],"000 bit1 B1":["Z","000 bit0"],"000 bit1 B0":["NZ","000 bit0"],
                         "001 bit0 A1":["NONE","011 bit1"],"001 bit0 B1":["NZ","000 bit0"],"001 bit0 B0":["Z","000 bit0"],
                         "001 bit1 A1":["NONE","011 bit0"],"001 bit1 B1":["Z","000 bit0"],"001 bit1 B0":["NZ","000 bit0"],
                         "010 bit0 A1":["NONE","000 bit1"],"010 bit0 B1":["NZ","100 bit1"],"010 bit0 B0":["Z","000 bit0"],
                         "010 bit1 A1":["NONE","000 bit0"],"010 bit1 B1":["Z","100 bit1"],"010 bit1 B0":["NZ","000 bit0"],
                         "011 bit0 A1":["NONE","001 bit1"],"011 bit0 B1":["NZ","000 bit0"],"011 bit0 B0":["Z","100 bit1"],
                         "011 bit1 A1":["NONE","001 bit0"],"011 bit1 B1":["Z","000 bit0"],"011 bit1 B0":["NZ","100 bit1"],
                         "100 bit0 A1":["NONE","110 bit1"],"100 bit0 B1":["NZ","100 bit1"],"100 bit0 B0":["Z","000 bit0"],
                         "100 bit1 A1":["NONE","110 bit0"],"100 bit1 B1":["Z","100 bit1"],"100 bit1 B0":["NZ","000 bit0"],
                         "101 bit0 A1":["NONE","111 bit1"],"101 bit0 B1":["NZ","000 bit0"],"101 bit0 B0":["Z","100 bit1"],
                         "101 bit1 A1":["NONE","111 bit0"],"101 bit1 B1":["Z","000 bit0"],"101 bit1 B0":["NZ","100 bit1"],
                         "110 bit0 A1":["NONE","100 bit1"],"110 bit0 B1":["NZ","100 bit1"],"110 bit0 B0":["Z","100 bit1"],
                         "110 bit1 A1":["NONE","100 bit0"],"110 bit1 B1":["Z","100 bit1"],"110 bit1 B0":["NZ","100 bit1"],
                         "111 bit0 A1":["NONE","101 bit1"],"111 bit0 B1":["NZ","100 bit1"],"111 bit0 B0":["Z","100 bit1"],
                         "111 bit1 A1":["NONE","101 bit0"],"111 bit1 B1":["Z","100 bit1"],"111 bit1 B0":["NZ","100 bit1"]}

sublookup = {"000 stopper0 bit0 A1":["NONE","000 stopper1 bit1"],"000 stopper0 bit0 B0":["Z","000 stopper0 bit0"],
                         "000 stopper0 bit0 B1":["NZ","100 stopper0 bit1"],"000 stopper0 bit1 A1":["NONE","000 stopper1 bit0"],
                         "000 stopper0 bit1 B0":["NZ","000 stopper0 bit0"],"000 stopper0 bit1 B1":["Z","100 stopper0 bit1"],
                         "000 stopper1 bit0 A1":["NONE","FAILURE"],"000 stopper1 bit0 B0":["Z","000 stopper0 bit0"],
                         "000 stopper1 bit0 B1":["NZ","000 stopper0 bit0"],"000 stopper1 bit1 A1":["NONE","FAILURE"],
                         "000 stopper1 bit1 B0":["NZ","000 stopper0 bit0"],"000 stopper1 bit1 B1":["Z","000 stopper0 bit0"],
                         "001 stopper0 bit0 A1":["NONE","001 stopper1 bit1"],"001 stopper0 bit0 B0":["Z","100 stopper0 bit1"],
                         "001 stopper0 bit0 B1":["NZ","000 stopper0 bit0"],"001 stopper0 bit1 A1":["NONE","001 stopper1 bit0"],
                         "001 stopper0 bit1 B0":["NZ","100 stopper0 bit1"],"001 stopper0 bit1 B1":["Z","000 stopper0 bit0"],
                         "001 stopper1 bit0 A1":["NONE","FAILURE"],"001 stopper1 bit0 B0":["Z","000 stopper0 bit0"],
                         "001 stopper1 bit0 B1":["NZ","000 stopper0 bit0"],"001 stopper1 bit1 A1":["NONE","FAILURE"],
                         "001 stopper1 bit1 B0":["NZ","000 stopper0 bit0"],"001 stopper1 bit1 B1":["Z","000 stopper0 bit0"],
                         "010 stopper0 bit0 A1":["NONE","010 stopper1 bit1"],"010 stopper0 bit0 B0":["Z","000 stopper0 bit0"],
                         "010 stopper0 bit0 B1":["NZ","000 stopper0 bit0"],"010 stopper0 bit1 A1":["NONE","010 stopper1 bit0"],
                         "010 stopper0 bit1 B0":["NZ","000 stopper0 bit0"],"010 stopper0 bit1 B1":["Z","000 stopper0 bit0"],
                         "010 stopper1 bit0 A1":["NONE","FAILURE"],"010 stopper1 bit0 B0":["Z","000 stopper0 bit0"],
                         "010 stopper1 bit0 B1":["NZ","100 stopper0 bit1"],"010 stopper1 bit1 A1":["NONE","FAILURE"],
                         "010 stopper1 bit1 B0":["NZ","000 stopper0 bit0"],"010 stopper1 bit1 B1":["Z","100 stopper0 bit1"],
                         "011 stopper0 bit0 A1":["NONE","011 stopper1 bit1"],"011 stopper0 bit0 B0":["Z","000 stopper0 bit0"],
                         "011 stopper0 bit0 B1":["NZ","000 stopper0 bit0"],"011 stopper0 bit1 A1":["NONE","011 stopper1 bit0"],
                         "011 stopper0 bit1 B0":["NZ","000 stopper0 bit0"],"011 stopper0 bit1 B1":["Z","000 stopper0 bit0"],
                         "011 stopper1 bit0 A1":["NONE","FAILURE"],"011 stopper1 bit0 B0":["Z","100 stopper0 bit1"],
                         "011 stopper1 bit0 B1":["NZ","000 stopper0 bit0"],"011 stopper1 bit1 A1":["NONE","FAILURE"],
                         "011 stopper1 bit1 B0":["NZ","100 stopper0 bit1"],"011 stopper1 bit1 B1":["Z","000 stopper0 bit0"],
                         "100 stopper0 bit0 A1":["NONE","100 stopper1 bit1"],"100 stopper0 bit0 B0":["Z","100 stopper0 bit1"],
                         "100 stopper0 bit0 B1":["NZ","100 stopper0 bit1"],"100 stopper0 bit1 A1":["NONE","100 stopper1 bit0"],
                         "100 stopper0 bit1 B0":["NZ","100 stopper0 bit1"],"100 stopper0 bit1 B1":["Z","100 stopper0 bit1"],
                         "100 stopper1 bit0 A1":["NONE","FAILURE"],"100 stopper1 bit0 B0":["Z","000 stopper0 bit0"],
                         "100 stopper1 bit0 B1":["NZ","100 stopper0 bit1"],"100 stopper1 bit1 A1":["NONE","FAILURE"],
                         "100 stopper1 bit1 B0":["NZ","000 stopper0 bit0"],"100 stopper1 bit1 B1":["Z","100 stopper0 bit1"],
                         "101 stopper0 bit0 A1":["NONE","101 stopper1 bit1"],"101 stopper0 bit0 B0":["Z","100 stopper0 bit1"],
                                        "101 stopper0 bit0 B1":["NZ","100 stopper0 bit1"],"101 stopper0 bit1 A1":["NONE","101 stopper1 bit0"],
                         "101 stopper0 bit1 B0":["NZ","100 stopper0 bit1"],"101 stopper0 bit1 B1":["Z","100 stopper0 bit1"],
                         "101 stopper1 bit0 A1":["NONE","FAILURE"],"101 stopper1 bit0 B0":["Z","100 stopper0 bit1"],
                         "101 stopper1 bit0 B1":["NZ","000 stopper0 bit0"],"101 stopper1 bit1 A1":["NONE","FAILURE"],
                         "101 stopper1 bit1 B0":["NZ","100 stopper0 bit1"],"101 stopper1 bit1 B1":["Z","000 stopper0 bit0"],
                         "110 stopper0 bit0 A1":["NONE","110 stopper1 bit1"],"110 stopper0 bit0 B0":["Z","000 stopper0 bit0"],
                         "110 stopper0 bit0 B1":["NZ","100 stopper0 bit1"],"110 stopper0 bit1 A1":["NONE","110 stopper1 bit0"],
                         "110 stopper0 bit1 B0":["NZ","000 stopper0 bit0"],"110 stopper0 bit1 B1":["Z","100 stopper0 bit1"],
                         "110 stopper1 bit0 A1":["NONE","FAILURE"],"110 stopper1 bit0 B0":["Z","100 stopper0 bit1"],
                         "110 stopper1 bit0 B1":["NZ","100 stopper0 bit1"],"110 stopper1 bit1 A1":["NONE","FAILURE"],
                         "110 stopper1 bit1 B0":["NZ","100 stopper0 bit1"],"110 stopper1 bit1 B1":["Z","100 stopper0 bit1"],
                         "111 stopper0 bit0 A1":["NONE","111 stopper1 bit1"],"111 stopper0 bit0 B0":["Z","100 stopper0 bit1"],
                         "111 stopper0 bit0 B1":["NZ","000 stopper0 bit0"],"111 stopper0 bit1 A1":["NONE","111 stopper1 bit0"],
                         "111 stopper0 bit1 B0":["NZ","100 stopper0 bit1"],"111 stopper0 bit1 B1":["Z","000 stopper0 bit0"],
                         "111 stopper1 bit0 A1":["NONE","FAILURE"],"111 stopper1 bit0 B0":["Z","100 stopper0 bit1"],
                         "111 stopper1 bit0 B1":["NZ","100 stopper0 bit1"],"111 stopper1 bit1 A1":["NONE","FAILURE"],
                                        "111 stopper1 bit1 B0":["NZ","100 stopper0 bit1"],"111 stopper1 bit1 B1":["Z","100 stopper0 bit1"]}


def validateprog(proglines):
	invalid = "" 
	
	for line in proglines:
		if line.strip()!="" and line.strip()[:1]!="#" and len(line.split(";")) == 4:
			regs = (line.split(";")[3]).split(",")
			
			num_ret = 0 
			ln = line.split(";")[0] + line.split(";")[1]
			for reg in regs: 
				
				if reg.endswith(' '):
					invalid += "Invalid register in line: " + ln + " , The reg is " + reg + "\n"
				
				reg = reg.strip(' ')
				
				if reg == 'NOP' or reg.startswith('DEC') or reg.startswith('TDEC') or reg.startswith('DEC') or reg.startswith('INC T') or reg.startswith('READ'):
					num_ret += 1
					
			
			if num_ret == 0:
				invalid += "No return in line: " + ln + "\n"
			
			if num_ret > 1:
				invalid += "Multi return in line: " + ln + "\n"
				
	return invalid
	
proglines = (APGsembly + "\nEND OF PROGRAM; Z\nEND OF PROGRAM; NZ").split('\n')

invalid = validateprog(proglines)

if invalid != "":
	g.note(invalid)
	g.exit()
	
# pre-processing to remove blank lines and comments, and deal with * / ZZ format
progonly = []
NZflag = 0

for line in proglines:
	if line.strip()!="" and line.strip()[:1]!="#":
		if NZflag == 0:
			Zline = line
			NZflag = 1
		else:
			NZflag = 0
			if line == "END OF PROGRAM; NZ":
				break
			
			# process the next pair of lines, make sure it's a matched Z + NZ set
			Zparts = Zline.split("; ")
			NZparts = line.split("; ")
			if Zparts[0]==NZparts[0]:
				if Zparts[1]=="Z" and NZparts[1]=="NZ":
					progonly += [Zline,line]
				else:
					g.note("Pre-processing failed on lines:\n" + Zline + "\n" + line + "\nNeed Z line followed by NZ line, or * / ZZ syntax.")
					g.exit()
			else:
				if Zparts[1]=="*":
					progonly += [Zline.replace("*","Z"),Zline.replace("*","NZ")]
					Zline = line
					NZflag = 1
				elif Zparts[1]=="ZZ":
					# in the line below, there's no .replace("; ZZ;","; Z;") in the compiler version,
					#         because we need to know whether to use ZNZ or onlyZ component...
					progonly += [Zline.replace("; ZZ;","; Z;"), Zparts[0]+"; NZ"]  
					Zline = line
					NZflag = 1
				else:
					g.note("Pre-processing failed on lines:\n" + Zline + "\n" + line + "\nNeed a Z and NZ line for each state, or * / ZZ syntax.")
					g.exit()

g.new(progname)
g.setrule("LifeHistory")
g.setcell(0,0,1)
g.fit()
g.setcell(0,0,0)
g.update()
runflag = 0
updatecount = 0 
breakpoint = "" 
update_every = 100000
def update():
	global runflag
	global updatecount 
	
	if runflag == 0:
		g.update()
	elif runflag == 1:
		updatecount += 1
		
		if updatecount % update_every == 0:
			g.update()
			
def check_keyboard():
	global runflag
	global breakpoint
	
	while 1:
		if runflag == 0:
			time.sleep(0.1)
			
		evt = g.getevent()
		if evt !="":
			g.show(state + " -- " + nextstate + " :: " + instr + "; regs=" + str(registers)  + " -- 'r' to toggle run mode, any key to step")
		if evt == "key q none":
			#g.setclipstr(s)
			g.exit()
		if evt == "key r none":
			runflag = 1-runflag
			breakpoint = ""
		elif evt=="key g none":
			break
		elif evt=="key b none":
			breakpoint = g.getstring("Run till breakpoint:", breakpoint)
			runflag = 1
		else:
			g.doevent(evt)
		if runflag == 1:
			break

# every state has a Z and NZ jump instruction to following states,
#        so the order of the program lines doesn't really matter.
#        Turn the program into a dictionary.
for item in progonly:
        fourparts = item.replace(", ",",").split("; ") 
        if len(fourparts) != 4:
                if len(fourparts) == 2:
                                # this is probably an auto-generated line for a state+Z/NZ combination that will never be reached
                                # ... so we'll try including it with empty jump and action values, and just see if it works.
                                fourparts += ["none",""]
                else:
                                g.note("Failed to parse: " + item)
                                g.exit()
        label, bitval, nextstate, instr = fourparts
        program[label+";"+bitval]=[nextstate,instr]

state, nextstate, nextoutput, outputtext = "START","INITIAL","Z",""

g.show(state + " -- " + nextstate + " :: " + instr + "; regs=" + str(registers)  + " -- 'r' to toggle run mode, any key to step")

def writeat(x0, cnt):

	if runflag == 0 or (runflag == 1 and updatecount % update_every == 0):
		g.select([x0, 10, 40, 10])
		g.clear(0)
		Write(str(cnt), x0, 10)
		g.select([])
		
	update()
        
def regist(reg):
	global lastx 
	global reg2x
	
	if reg not in reg2x:
		reg2x[reg]=lastx 
		Write(reg, lastx)
		lastx += 40
                
def initreg(reg):
	regist(reg)
	g.setcell(reg2x[reg], -10, 1)
	g.setcell(reg2x[reg] - 1, - 10, 3)
	writeat(reg2x[reg], 0)

regist("MUL")
regist("SUB")
regist("ADD")

Rregs = [] 
Tregs = [] 

for line in proglines:
	if line.strip()!="" and line.strip()[:1]!="#" and len(line.split(";")) == 4:
		regs = (line.split(";")[3]).replace("READ", "").replace("OUTPUT", "").replace("TDEC", "").replace("DEC", "").replace("INC", "").replace("RESET", "").replace("SET", "").replace("NOP", "").replace(" ", "").split(",")
        
		for reg in regs:
			if reg.startswith("R") and reg not in Rregs:
				Rregs.append(reg)
			
			if reg.startswith("T") and reg not in Tregs:
				Tregs.append(reg)
				
for reg in registers:
	if reg.startswith("R") and reg not in Rregs:
		Rregs.append(reg)
	
	if reg.startswith("T") and reg not in Tregs:
		Tregs.append(reg)
		
Tregs.sort()
Rregs.sort()

for r in Rregs:
	regist(r)
        
for r in Tregs:
	initreg(r)

arm_sqx0 = lastx
arm_sqy0 = -10
sqx0 = arm_sqx0 + 1
sqy0 = arm_sqy0 - 1

g.setcell(arm_sqx0, arm_sqy0, 2)
g.setcell(sqx0, arm_sqy0, 3)
g.setcell(arm_sqx0, sqy0, 3)

regist("SQX")
regist("SQY")


for reg in registers:
	if reg.startswith("R"):
		cnt = registers[reg]	
		for i in range(cnt):
			g.setcell(reg2x[reg], -10-i, 1)
		writeat(reg2x[reg], cnt)
	if reg.startswith("T"):
		ptr,bits = registers[reg]
		g.setcell(reg2x[reg] - 1, -10, 0)
		g.setcell(reg2x[reg] - 1, -10-ptr, 3)
		
		for i in range(len(bits)):
			g.setcell(reg2x[reg], -10-i, 1 + int(bits[i]) - int('0'))
		
		writeat(reg2x[reg], ptr)
	
check_keyboard()

def checkreg(registers, reg):
	if reg not in registers:
		if reg[:1]=="T": # binary register
			registers[reg]=[0,"0"]
		else:
			registers[reg]=0 # simple register
			
	
while 1:

	if nextoutput == "":
		g.show(state + " -- " + nextstate + " :: " + instr + "; regs=" + str(registers)  + "; mem=" + str(memory))
		g.note("Program reached halt state (because no bit value was returned by any instruction).")
		g.setclipstr(s)
		g.exit()
	
	
	state = nextstate + ";" + nextoutput
	# get info from program dictionary, move to next state
	nextstate, instr = program[state]
	
	if nextstate == breakpoint:
		runflag = 0
		
	if runflag == 0 or (runflag == 1 and breakpoint != ""):
		
		if runflag == 0 or updatecount % update_every == 0:
			g.select([0, 40, 300, 15])
			g.clear(0)
			Write(state + " -- " + nextstate + " :: " + instr + ";", 0, 40)
			g.select([])
			
		update()
		
	# process instructions for current state
	# -- there may be just one instruction,
	#         or several comma-separated instructions
	nextoutput = ""  # if some instruction doesn't set this variable, the program will halt
	for i in instr.split(","):
		# allow stepping or full-speed run from keyboard (toggle "r")
		check_keyboard()

		if i == "NOP":
			nextoutput = "Z"

		elif i == "READ SQ":
			if "SQX" not in registers: 
				registers["SQX"], registers["SQY"]=0,0  # initialize if necessary
			
			coord = str(registers["SQX"]) +","+str(registers["SQY"])
					
			if coord not in memory:
				memory[coord]=0
			if memory[coord]==0:
				nextoutput = "Z"
			else:
				nextoutput = "NZ"
				memory[coord] = 0  # this is a destructive read operation
		
			sqx = sqx0 + registers["SQX"]
			sqy = sqy0 - registers["SQY"]
			g.setcell(sqx, sqy, 0)
			update()
			
		elif i == "SET SQ":
			if "SQX" not in registers: 
				registers["SQX"], registers["SQY"]=0,0  # initialize if necessary
			
			coord = str(registers["SQX"]) +","+str(registers["SQY"])
			
			if coord not in memory:
				memory[coord]=0
			if memory[coord]==0:
				memory[coord] = 1
				   
			else:
				g.note("PROGRAM ERROR:\nTried to set memory coordinate " + coord + "to 1,\nwhen it was already 1.")
				g.exit()
					
			sqx = sqx0 + registers["SQX"]
			sqy = sqy0 - registers["SQY"]
			g.setcell(sqx, sqy, 1)
			update()
				
		elif i[:4]=="INC ":
			reg = i.split(" ")[1]
			
			if reg.startswith("SQ") and "SQX" not in registers:
				registers["SQX"], registers["SQY"]=0,0  # initialize if necessary
			
			checkreg(registers, reg)
			
			if isinstance(registers[reg], types.ListType): # binary register
				ptr,bits = registers[reg]
				if ptr == len(bits)-1:
					bits+="0"                                # the mechanism automatically adds a zero when INCing past current end of tape
					g.setcell(reg2x[reg], -9-len(bits), 1)
					nextoutput = "Z"  # ... and it returns a zero output in that case
				else:
					nextoutput = "NZ" # if it's not creating a new bit, it returns an NZ output.  TODO: what does the program use this for?
				registers[reg] = [ptr+1,bits]
				
				g.setcell(reg2x[reg] - 1, -10-ptr, 0)
				g.setcell(reg2x[reg] - 1, -11-ptr, 3)
				writeat(reg2x[reg], ptr+1)
			else:
				if reg.startswith("SQ") and "SQX" not in registers:
					registers["SQX"], registers["SQY"]=0,0  # initialize if necessary
		
				registers[reg] += 1  # simple register
				writeat(reg2x[reg], registers[reg])
				
				if reg.startswith("R"):
					cnt = registers[reg]
					g.setcell(reg2x[reg], -10-cnt, 1)
					writeat(reg2x[reg], cnt)
				elif reg == "SQX":
					sqx = sqx0 + registers["SQX"] - 1
					sqy = sqy0 - registers["SQY"]
	
					g.setcell(sqx, arm_sqy0, 2)
					sqx += 1
					g.setcell(sqx, arm_sqy0, 3)
					update()
				elif reg == "SQY":
					sqx = sqx0 + registers["SQX"]
					sqy = sqy0 - registers["SQY"] + 1
	
					g.setcell(arm_sqx0, sqy, 2)
					sqy -= 1
					g.setcell(arm_sqx0, sqy, 3)
					update()
							
		elif i[:5]=="TDEC " or i[:6]=="DEC SQ": # simple register
			reg = i.split(" ")[1]
			
			if reg.startswith("SQ") and "SQX" not in registers:
				registers["SQX"], registers["SQY"]=0,0  # initialize if necessary
			
			checkreg(registers, reg)
			
			if registers[reg] == 0:
				nextoutput = "Z" # don't update register, it's already zero
				cnt = 0
				w = 0 
			else:
				registers[reg] -= 1
				nextoutput = "NZ"
				cnt = registers[reg] 
				w = cnt + 1
		
			writeat(reg2x[reg], cnt)
					
			if reg.startswith("R"):
				g.setcell(reg2x[reg], -10-w, 0)
					
			elif reg == "SQX":
				sqx = sqx0 + registers["SQX"] + 1
				sqy = sqy0 - registers["SQY"]
		
				g.setcell(sqx, arm_sqy0, 0)
				sqx -= 1
				g.setcell(sqx, arm_sqy0, 3)
				update()
			
			elif reg == "SQY":
				sqx = sqx0 + registers["SQX"]
				sqy = sqy0 - registers["SQY"] - 1
		
				g.setcell(arm_sqx0, sqy, 0)
				sqy += 1
				g.setcell(arm_sqx0, sqy, 3)
				update()
				
		elif i[:4]=="DEC ": # binary register
			reg = i.split(" ")[1]
			
			checkreg(registers, reg)
			
			ptr,bits = registers[reg]
			if ptr == 0:
				nextoutput = "Z" # don't update register, it's already zero
			else:
				registers[reg] = [ptr-1,bits]
				g.setcell(reg2x[reg] - 1, -10-ptr, 0)
				g.setcell(reg2x[reg] - 1, -9-ptr, 3)
				writeat(reg2x[reg], ptr - 1)
				
				nextoutput = "NZ"         

		elif i=="HALT":
			g.note("Program reached halt state.")
			#g.setclipstr(s)
			g.exit()

		elif i[:4]=="MUL ":
			bit = str(i[4:])
			if "MUL" not in registers:
					registers["MUL"]="00000"
			nextoutput, registers["MUL"] = mullookup["MUL" + bit + " " + registers["MUL"]]
			
			for i in range(5): 
				if registers["MUL"][i] == '0':
					g.setcell(reg2x["MUL"], -10 - i, 2)
				else:
					g.setcell(reg2x["MUL"], -10 - i, 1)
				
		elif i[:7] == "OUTPUT ":
			outputtext += i[7:]
			Write(outputtext, 0, 40)
			update()

		elif i[:4]=="SUB ":
			if "SUB" not in registers:
				registers["SUB"]="000 stopper0 bit0"
			whichinput = i[4:]
			out, registers["SUB"] = sublookup[registers["SUB"] + " " + whichinput]
			if registers["SUB"] == "FAILURE":
				g.note("Program crashed at line '" + i + "'.  SUB A1 must have been run twice (?).")
				g.exit()
			if out != "NONE":
				nextoutput = out
			
			idxs = [0,1,2,11,16]
			for i in range(4): 
				if registers["SUB"][idxs[i]] == '0':
					g.setcell(reg2x["SUB"], -10 - i, 2)
				else:
					g.setcell(reg2x["SUB"], -10 - i, 1)
					
		elif i[:4]=="ADD ":
			if "ADD" not in registers:
				registers["ADD"]="000 bit0"
			whichinput = i[4:]
			temp = registers["ADD"] + " " + whichinput
			out, registers["ADD"] = addlookup[temp]
			if out != "NONE":
				nextoutput = out
			
			idxs = [0,1,2,7]
			for i in range(4): 
				if registers["ADD"][idxs[i]] == '0':
					g.setcell(reg2x["ADD"], -10 - i, 2)
				else:
					g.setcell(reg2x["ADD"], -10 - i, 1)
					
		elif i[:5]=="READ ":
			binregname = i[5:] # TODO: maybe be consistent and use .split()?
			if binregname not in registers:
				registers[binregname]=[0,"0"]
				initreg(binregname)
			ptr, bits = registers[binregname]
			if bits[ptr]=="x":
				g.note("Program crashed on instruction '" + i + "':\n attempt to read an empty position in a binary register.")
				g.exit()
			elif bits[ptr]=="0":
				nextoutput = "Z"
			elif bits[ptr]=="1":
				nextoutput = "NZ"
			else:
				g.note("Emulator error. Found value '" + bits[ptr] + "' on READ, in " + binregname + " bitstring -- " + str(registers[binregname]) + ".")
				g.exit()
			registers[binregname] = [ptr, bits[:ptr]+"x"+bits[ptr+1:]]
			g.setcell(reg2x[binregname], -10-ptr, 4)
			update()

		elif i[:4]=="SET ":
			binregname = i[4:]
			if binregname not in registers:
				registers[binregname]=[0,"0"]
				initreg(binregname)
			ptr, bits = registers[binregname]
			if bits[ptr]!="x":
				g.note("Crash. Found value '" + bits[ptr] + "' on SET, in " + binregname + " bitstring -- " + str(registers[binregname]) + ".")
				g.exit()
			registers[binregname] = [ptr, bits[:ptr]+"1"+bits[ptr+1:]]
			g.setcell(reg2x[binregname], -10-ptr, 2)
			update()

		elif i[:6]=="RESET ":
			binregname = i[6:]
			if binregname not in registers:
				registers[binregname]=[0,"0"]
				initreg(binregname)
			else:
				ptr, bits = registers[binregname]
			if bits[ptr]!="x":
				g.note("Crash. Found value '" + bits[ptr] + "' on READ, in " + binregname + " bitstring -- " + str(registers[binregname]) + ".")
				g.exit()
			registers[binregname] = [ptr, bits[:ptr]+"0"+bits[ptr+1:]]
			g.setcell(reg2x[binregname], -10-ptr, 1)
			update()

		else:
			g.note("Unknown instruction: " + instr + " -- ~" + i + "~")
			g.exit()
